§rem ; Hi-lock: (("^§[a-z]*" (0 (quote hi-yellow) t)))
§define Pct %
§ask ModeName  Mode name (without "-mode")
§ask OneLineDesc
;;; §Pct§M§Pct§  --- §OneLineDesc§

§ask User Author
§ask FullName
§ask MailAddress
§ask Date Createdate
§ask Year (c) 20xx
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Author:		(c) §FullName§ <§MailAddress§>
;; Last-Modified:	§Pct§E§Pct§
;; Version:		§Pct§I§Pct§
§ask Keywords
;; Keywords:		§Keywords§
;; Adapted-By:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; This file is NOT part of GNU Emacs.
;;
;; GNU Emacs is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Commentary:
;; ....
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Code:
;;; ========================================================================

(defvar §ModeName§-mode-submap nil
  "Keymap used with §ModeName§ mode.")

(defvar §ModeName§-mode-map nil
  "Keymap used with §ModeName§ mode.")

(defvar §ModeName§-mode-prefix-key "\C-cx"
  "*Prefix key for all §ModeName§ mode commands.")

(defconst §ModeName§-mode-name " §ModeName§"
  "Name used in mode-line.")

(defconst §ModeName§-buffer-name "*§ModeName§*"
  "Name used for §ModeName§-mode buffer.")

(defvar §ModeName§-mode nil
  "Non-nil when §ModeName§-mode is activated.")

(defvar §ModeName§-mode-hook nil
  "Functions to call after loading §ModeName§-mode.")

(defconst §ModeName§-mode-version "v§Pct§I§Pct§"
  "Current version of §ModeName§ mode")

; ======================================================================

(if §ModeName§-mode-submap  ()
  (setq §ModeName§-mode-submap (make-sparse-keymap))
  (define-key §ModeName§-mode-submap "a" '§ModeName§-a)
  (define-key §ModeName§-mode-submap "b" '§ModeName§-b))

;; Set up main map, which leads via the prefix key to the submap.
(if §ModeName§-mode-map ()
  (setq §ModeName§-mode-map (make-sparse-keymap))
  (define-key §ModeName§-mode-map
    §ModeName§-mode-prefix-key
    §ModeName§-mode-submap))


;; Activate map
(or (assq '§ModeName§-mode minor-mode-map-alist)
    (setq minor-mode-map-alist
          (cons (cons '§ModeName§-mode §ModeName§-mode-map)
                minor-mode-map-alist)))

;; Display name
(or (assq '§ModeName§-mode minor-mode-alist)
    (setq minor-mode-alist
          (cons '(§ModeName§-mode §ModeName§-mode-name)
                minor-mode-alist)))


; ======================================================================

;;;###autoload
(defun §ModeName§-mode (arg)
  "Toggle §ModeName§ minor mode.
With ARG, turn §ModeName§ mode on iff arg is positive.
The mode, whose commands all have prefix \\[§ModeName§-mode-prefix-key],
...

\\{§ModeName§-mode-map}"
  (interactive "P")
  (make-local-variable '§ModeName§-mode)
  (setq §ModeName§-mode
	(if (null arg)
	    (not §ModeName§-mode)
	  (> (prefix-numeric-value arg) 0)))

  (force-mode-line-update)
  (if §ModeName§-mode
      (progn
	(run-hooks '§ModeName§-mode-hook))))

(provide '§ModeName§)

;;; §Pct§M§Pct§ ends here
