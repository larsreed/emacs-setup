;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables (list 
   (semanticdb-table "jde.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jde-version" variable (:constant-flag t :default-value "2.3.5") nil [1351 1405]) ("jde-cedet-min-version" variable (:constant-flag t :default-value "1.0beta2") nil [1407 1476]) ("jde-cedet-max-version" variable (:constant-flag t :default-value "1.0") nil [1477 1541]) ("jde-xemacsp" variable (:constant-flag t :default-value (string-match "XEmacs" (emacs-version))) nil [1543 1662]) ("jde-xemacs20p" variable (:constant-flag t :default-value (and jde-xemacsp (>= emacs-major-version 20))) nil [1664 1734]) ("jde-emacs21p" variable (:constant-flag t :default-value (and (string-match "\\bEmacs\\b" (emacs-version)) (>= emacs-major-version 21))) nil [1737 1846]) ("unless" code nil nil [1848 1933]) ("jde-util" include nil nil [1936 1955]) ("unless" code nil nil [2159 2301]) ("jde-custom" include nil nil [2303 2324]) ("jde-help" include nil nil [2325 2344]) ("semantic-load" include nil nil [2345 2369]) ("easymenu" include nil nil [2370 2389]) ("cl" include nil nil [2390 2403]) ("font-lock" include nil nil [2404 2424]) ("cc-mode" include nil nil [2425 2443]) ("cus-edit" include nil nil [2444 2463]) ("comint" include nil nil [2464 2481]) ("jde-compile" include nil nil [2482 2504]) ("jde-db" include nil nil [2505 2522]) ("jde-bug" include nil nil [2523 2541]) ("jde-jdb" include nil nil [2542 2560]) ("jde-run" include nil nil [2561 2579]) ("jde-gen" include nil nil [2580 2598]) ("compile" include nil nil [2599 2617]) ("imenu" include nil nil [2618 2634]) ("browse-url" include nil nil [2635 2656]) ("beanshell" include nil nil [2657 2677]) ("jde-plugins" include nil nil [2678 2700]) ("jde-wiz" include nil nil [2701 2719]) ("jde-java-grammar" include nil nil [2720 2747]) ("jde-complete" include nil nil [2748 2771]) ("jde-which-method" include nil nil [2772 2799]) ("jde-java-font-lock" include nil nil [2800 2829]) ("jde-import" include nil nil [2830 2851]) ("jde-class" include nil nil [2852 2872]) ("executable" include nil nil [2873 2894]) ("efc" include nil nil [2928 2942]) ("jde-open-source" include nil nil [2943 2969]) ("etags" include nil nil [2970 2986]) ("regress" include nil nil [2987 3005]) ("if" code nil nil [3007 3095]) ("defgroup" code nil nil [3098 3182]) ("jde-check-version-flag" variable (:user-visible-flag t :default-value t) nil [3185 3500]) ("jde-key-bindings" variable (:user-visible-flag t :default-value (list (cons "[? ? ?]" (quote jde-run-menu-run-applet)) (cons "[? ? ?]" (quote jde-build)) (cons "[? ? ?]" (quote jde-compile)) (cons "[? ? ?]" (quote jde-debug)) (cons "[? ? ?]" (quote jde-find)) (cons "[? ? ?]" (quote jde-open-class-at-point)) (cons "[? ? ?]" (quote jde-bsh-run)) (cons "[? ? ?]" (quote jde-gen-println)) (cons "[? ? ?]" (quote jde-help-browse-jdk-doc)) (cons "[? ? ?]" (quote jde-save-project)) (cons "[? ? ?]" (quote jde-wiz-update-class-list)) (cons "[? ? ?]" (quote jde-run)) (cons "[? ? ?]" (quote speedbar-frame-mode)) (cons "[? ? ?]" (quote jde-jdb-menu-debug-applet)) (cons "[? ? ?]" (quote jde-help-symbol)) (cons "[? ? ?]" (quote jde-show-superclass-source)) (cons "[? ? ?]" (quote jde-open-class-at-point)) (cons "[? ? ?]" (quote jde-import-find-and-import)) (cons "[? ? ?e]" (quote jde-wiz-extend-abstract-class)) (cons "[? ? ?f]" (quote jde-gen-try-finally-wrapper)) (cons "[? ? ?i]" (quote jde-wiz-implement-interface)) (cons "[? ? ?j]" (quote jde-javadoc-autodoc-at-line)) (cons "[? ? ?o]" (quote jde-wiz-override-method)) (cons "[? ? ?t]" (quote jde-gen-try-catch-wrapper)) (cons "[? ? ?z]" (quote jde-import-all)) (cons "[? ? ?]" (quote jde-run-etrace-prev)) (cons "[? ? ?]" (quote jde-run-etrace-next)) (cons "[(control c) (control v) (control ?.)]" (quote jde-complete)) (cons "[(control c) (control v) ?.]" (quote jde-complete-in-line)))) nil [3536 6532]) ("jde-launch-beanshell-on-demand-p" variable (:default-value t) nil [6534 6806]) ("jde-java-environment-variables" variable (:default-value (quote ("JAVA_VERSION" "JAVA_HOME"))) nil [6810 7206]) ("jde-set-jdk-dir-type" function (:arguments ("sym" "val")) nil [7208 7907]) ("jde-jdk-registry" variable nil nil [7943 8534]) ("jde-jdk" variable nil nil [8561 9517]) ("jde-find-jdk-in-exec-path" function nil nil [9520 10292]) ("jde-get-jdk-dir" function (:user-visible-flag t) nil [10295 11993]) ("jde-get-jdk-prog" function (:arguments ("progname")) nil [11996 12678]) ("jde-get-tools-jar" function nil nil [12681 13187]) ("jde-java-version-cache" variable nil nil [13189 13272]) ("jde-java-version-via-java" function nil nil [13274 13794]) ("jde-java-version" function (:user-visible-flag t) nil [13796 14412]) ("jde-java-major-version" function nil nil [14414 14741]) ("jde-java-minor-version" function nil nil [14743 15070]) ("jde-jdk-doc-url" variable (:user-visible-flag t) nil [15105 15429]) ("jde-global-classpath" variable nil nil [15468 17465]) ("jde-quote-classpath" variable (:user-visible-flag t :default-value t) nil [17467 17693]) ("jde-expand-classpath-p" variable (:default-value t) nil [17695 17917]) ("jde-lib-directory-names" variable (:default-value (list "^lib" "^jar")) nil [17960 18246]) ("jde-lib-excluded-file-names" variable nil nil [18248 18508]) ("jde-sourcepath" variable (:user-visible-flag t) nil [18543 18971]) ("jde-build-function" variable (:user-visible-flag t :default-value (quote (jde-make))) nil [19010 19628]) ("jde-debugger" variable (:default-value (list "jdb")) nil [19659 20576]) ("jde-devel-debug" variable nil nil [20578 20815]) ("jde-enable-senator" variable (:default-value t) nil [20854 21463]) ("jde-enable-abbrev-mode" variable (:user-visible-flag t) nil [21468 21988]) ("jde-mode-abbreviations" variable (:user-visible-flag t :default-value (list (cons "ab" "abstract") (cons "bo" "boolean") (cons "br" "break") (cons "by" "byte") (cons "byv" "byvalue") (cons "cas" "cast") (cons "ca" "catch") (cons "ch" "char") (cons "cl" "class") (cons "co" "const") (cons "con" "continue") (cons "de" "default") (cons "dou" "double") (cons "el" "else") (cons "ex" "extends") (cons "fa" "false") (cons "fi" "final") (cons "fin" "finally") (cons "fl" "float") (cons "fo" "for") (cons "fu" "future") (cons "ge" "generic") (cons "go" "goto") (cons "impl" "implements") (cons "impo" "import") (cons "ins" "instanceof") (cons "in" "int") (cons "inte" "interface") (cons "lo" "long") (cons "na" "native") (cons "ne" "new") (cons "nu" "null") (cons "pa" "package") (cons "pri" "private") (cons "pro" "protected") (cons "pu" "public") (cons "re" "return") (cons "sh" "short") (cons "st" "static") (cons "su" "super") (cons "sw" "switch") (cons "sy" "synchronized") (cons "th" "this") (cons "thr" "throw") (cons "thro" "throws") (cons "tra" "transient") (cons "tr" "true") (cons "vo" "void") (cons "vol" "volatile") (cons "wh" "while"))) nil [21990 24004]) ("jde-init-abbrev-table" function (:user-visible-flag t) nil [24006 25010]) ("jde-abbrev-mode" function (:user-visible-flag t) nil [25076 25541]) ("jde-show-abbrevs" function (:user-visible-flag t) nil [25543 25942]) ("jde-classpath-separator" variable (:default-value (if (member system-type (quote (cygwin32 cygwin))) ";" path-separator)) nil [25945 26135]) ("jde-set-global-classpath" function (:user-visible-flag t :arguments ("classpath")) nil [26153 26463]) ("jde-show-run-options" function (:user-visible-flag t) nil [26468 26599]) ("jde-show-debug-options" function (:user-visible-flag t) nil [26601 26735]) ("jde-show-project-options" function (:user-visible-flag t) nil [26737 26870]) ("jde-show-autocode-options" function (:user-visible-flag t) nil [26872 26997]) ("jde-show-wiz-options" function (:user-visible-flag t) nil [26999 27126]) ("jde-show-complete-options" function (:user-visible-flag t) nil [27128 27266]) ("jde-build" function (:user-visible-flag t) nil [27283 27466]) ("derived-mode-init-mode-variables" code nil nil [27759 27803]) ("put" code nil nil [27804 27851]) ("jde-mode" function (:user-visible-flag t) nil [27868 31871]) ("jde-check-versions-message" variable (:constant-flag t :default-value "JDEE requires a version of CEDET between %s and %s (found %s)") nil [31897 32001]) ("jde-check-versions" function nil nil [32004 32851]) ("jde-check-version" function (:arguments ("current-version" "min-version" "max-version")) nil [32854 33325]) ("jde-earlier-versionp" function (:arguments ("ver1" "ver2")) nil [33327 33875]) ("jde-log-max" variable (:user-visible-flag t :default-value 500) nil [33883 34148]) ("jde-log-msg" function (:arguments ("msg" "&rest" "args")) nil [34150 34782]) ("jde-log-msg-t" function (:arguments ("msg" "&rest" "args")) nil [34784 35001]) ("jde-log-msg-nil" function (:arguments ("msg" "&rest" "args")) nil [35003 35228]) ("add-to-list" code nil nil [35402 35459]) ("jde-menu-definition" variable (:user-visible-flag t :default-value (list "JDE" ["Compile" jde-compile t] ["Run App" jde-run t] ["Debug App" jde-debug t] "-" ["Run Applet" jde-run-menu-run-applet t] ["Debug Applet" jde-debug-applet t] "-" ["Build" jde-build t] (list "Find" ["Expression" jde-find (and (executable-find (if (eq system-type (quote windows-nt)) "find.exe" "find")) (executable-find (if (eq system-type (quote windows-nt)) "grep.exe" "grep")))] ["Expression..." jde-find-dlg (and (executable-find (if (eq system-type (quote windows-nt)) "find.exe" "find")) (executable-find (if (eq system-type (quote windows-nt)) "grep.exe" "grep")))] ["Symbol Definition" jde-open-class-at-point t] ["Class" jde-show-class-source t] ["Super Class" jde-show-superclass-source t] ["Interface" jde-show-interface-source t]) (list "Interpreter" ["Start" jde-bsh-run t] ["Exit" jde-bsh-exit t] "-" ["Help" jde-help-beanshell t]) (list "Documentation" ["Add" jde-javadoc-autodoc-at-line (jde-javadoc-enable-menu-p)] ["Remove" jde-javadoc-remdoc-at-line (jde-javadoc-enable-menu-p)] ["Check This" jde-javadoc-checkdoc-at-line (jde-javadoc-enable-menu-p)] ["Check All" jde-javadoc-checkdoc t] ["Generate All" jde-javadoc-make t] ["Generate Buffer" jde-javadoc-make-buffer t] "-" ["Javadoc Reference" jde-javadoc-browse-tool-doc t]) "-" (list "Code Generation" (list "Templates" ["Get/Set Pair..." jde-gen-get-set t] ["Println..." jde-gen-println t] (list "Listener" ["Action" jde-gen-action-listener t] ["Change" jde-gen-change-listener t] ["Window" jde-gen-window-listener t] ["Mouse" jde-gen-mouse-listener t]) ["Other..." jde-gen-code t]) (list "Import" ["Class..." jde-import-find-and-import t] ["All" jde-import-all t] ["All Unique" jde-import-all-unique t] "-" ["Expand Package Imports" jde-import-expand-imports t] ["Collapse Class Imports" jde-import-collapse-imports t] ["Delete Unneeded" jde-import-kill-extra-imports t] ["Organize Imports" jde-import-organize t] ["Show Unimported Classes" jde-import-all-show t]) (list "Wizards" ["Override Method" jde-wiz-override-method t] ["Implement Interface..." jde-wiz-implement-interface t] ["Generate Get/Set Methods" jde-wiz-get-set-methods t] ["Generate toString Method" jde-wiz-tostring t] ["Update Package Statement" jde-package-update t] ["Implement Event Source..." jde-wiz-implement-event-source t] ["Extend Abstract Class..." jde-wiz-extend-abstract-class t] ["Delegate Methods..." jde-wiz-delegate t] "-" ["Update Class List" jde-wiz-update-class-list t]) (list "Modes" (vector "Abbrev" (quote jde-abbrev-mode) (if (featurep (quote xemacs)) :active :enable) t :style (quote toggle) :selected (quote jde-enable-abbrev-mode)) (vector "Electric Return" (quote jde-electric-return-mode) (if (featurep (quote xemacs)) :active :enable) t :style (quote toggle) :selected (quote jde-electric-return-mode)))) (list "Browse" ["Source Files" jde-show-speedbar t] ["Class at Point" jde-browse-class-at-point t]) ["Check Style" jde-checkstyle] (list "Project" (vector "Auto Switch" (quote jde-toggle-project-switching) (if jde-xemacsp :active :enable) t :style (quote toggle) :selected (quote jde-project-context-switching-enabled-p)) (list "Options" ["General" jde-show-project-options t] ["Compile" jde-compile-show-options-buffer t] ["Run" jde-show-run-options t] ["Debug" jde-show-debug-options t] ["Autocode" jde-show-autocode-options t] ["Javadoc" jde-javadoc-customize t] ["Make" jde-make-show-options t] ["Ant" jde-ant-show-options t] ["Complete" jde-show-complete-options t] ["Wiz" jde-show-wiz-options t]) (list "Project File" ["Create New" jde-create-new-project t] ["Save" jde-save-project t] ["Load" jde-load-project-file t] ["Load All" jde-load-all-project-files t])) (list "Help" ["JDEE Users Guide" jde-show-help t] ["JDK" jde-help-browse-jdk-doc t] ["JDEE Key Bindings" jde-keys t] "-" ["Class..." jde-help-class t] ["Class Member..." jde-help-class-member t] ["Symbol at Point" jde-help-symbol t] "-" ["Submit problem report" jde-submit-problem-report t] "-" (concat "JDE " jde-version)))) nil [35461 41303]) ("jde-insert-menu-in-xemacs-menubar" function nil nil [41306 41668]) ("jde-new-buffer-menu" variable (:user-visible-flag t :default-value (list "JDE New" ["Class..." jde-gen-class-buffer t] ["Interface..." jde-gen-interface-buffer t] ["Console..." jde-gen-console-buffer t] ["Bean..." jde-gen-bean-buffer t] ["Unit Test..." jde-junit-test-class-buffer t] (list "EJB" ["Session Bean" jde-ejb-session-bean-buffer t] ["Entity Bean" jde-ejb-entity-bean-buffer t]) ["Other..." jde-gen-buffer t])) nil [41671 42642]) ("jde-cygpath" function (:user-visible-flag t :arguments ("path" "&optional" "direction")) nil [43050 43892]) ("jde-cygwin-root-cache" variable nil nil [43894 43980]) ("jde-cygwin-path-converter-cygpath" function (:arguments ("path")) nil [43982 44903]) ("jde-cygwin-path-converter-internal" function (:user-visible-flag t :arguments ("path")) nil [44910 46060]) ("jde-cygwin-path-converter" variable (:default-value (quote (jde-cygwin-path-converter-internal))) nil [46062 47030]) ("jde-convert-cygwin-path" function (:user-visible-flag t :arguments ("path" "&optional" "separator")) nil [47042 47379]) ("jde-resolve-relative-paths-p" variable (:default-value t) nil [47381 47765]) ("jde-normalize-path" function (:arguments ("path" "&optional" "symbol")) nil [47767 51229]) ("jde-expand-directory" function (:arguments ("dir" "include-regexp" "exclude-regexps" "symbol")) nil [51232 51828]) ("jde-expand-classpath" function (:arguments ("classpath" "&optional" "symbol")) nil [51831 52894]) ("jde-build-classpath" function (:arguments ("paths" "&optional" "symbol" "quote-path-p")) nil [52897 53462]) ("jde-global-classpath" function nil nil [53464 53620]) ("jde-build-path-arg" function (:arguments ("arg" "path-list" "&optional" "quote" "symbol")) nil [53623 53900]) ("jde-build-classpath-arg" function (:arguments ("path-list" "&optional" "quote" "symbol")) nil [53903 54069]) ("jde-root-dir-p" function (:arguments ("dir")) nil [54071 55373]) ("jde-get-global-classpath" function nil nil [55375 55954]) ("jde-entering-java-buffer-hook" variable (:user-visible-flag t :default-value (quote (jde-reload-project-file jde-which-method-update-on-entering-buffer))) nil [55958 56503]) ("jde-current-buffer" variable (:user-visible-flag t :default-value (current-buffer)) nil [56505 56614]) ("jde-detect-java-buffer-activation" function nil nil [56616 57145]) ("jde-monitor-post-command-hook" function nil nil [57147 57480]) ("jde-monitor-post-command-hook-timer" variable nil nil [57482 57601]) ("jde-count-open-java-buffers" function nil nil [57603 57905]) ("jde-clean-up-after-jde" function nil nil [57910 58403]) ("jde-find-jde-doc-directory" function nil nil [58418 58873]) ("jde-show-help" function (:user-visible-flag t) nil [58890 59462]) ("jde-problem-report-mail-address" variable (:default-value "pkinnucan@comcast.net") nil [59554 59619]) ("jde-submit-problem-report" function (:user-visible-flag t) nil [59621 60267]) ("jde-problem-report-post-hooks" function nil nil [60270 65252]) ("jde-problem-report-list-all-variables" function nil nil [65254 65484]) ("eval-when" code nil nil [65514 65554]) ("jde-setnu-deletion-check" variable (:default-value t) nil [65556 65608]) ("make-variable-buffer-local" code nil nil [65609 65663]) ("jde-setnu-after-change" function (:arguments ("start" "end" "length")) nil [65665 66095]) ("jde-setnu-before-change" function (:arguments ("start" "end")) nil [66097 66344]) ("jde-setnu-mode-threshold" variable (:default-value 20000) nil [66347 66517]) ("jde-setnu-mode-enable" variable nil nil [66519 67306]) ("jde-keymap-test" function (:arguments ("var")) nil [67377 67523]) ("jde-describe-map" function (:user-visible-flag t :arguments ("map")) nil [67525 68143]) ("jde-keys" function (:user-visible-flag t) nil [68145 68297]) ("jde-compile-file-if-necessary" function (:arguments ("file")) nil [68354 68958]) ("jde-compile-jde" function (:user-visible-flag t) nil [68975 69521]) ("jde-find-case-sensitive" variable (:user-visible-flag t) nil [69930 70165]) ("jde-find-granularity" variable (:user-visible-flag t :default-value (quote ("Character"))) nil [70205 70615]) ("jde-find-file-regexp" variable (:user-visible-flag t :default-value (quote ("*.java"))) nil [70618 70924]) ("jde-find-dialog" type (:typemodifiers ("\"Dialog displayed by `jde-find' command.\"") :superclasses "efc-dialog" :members (("expr-field" variable (:documentation "Edit field for expression to find.") nil nil) ("expression" variable (:documentation "Regular expression to find." :type "string") nil nil) ("dir-fields" variable (:documentation "List of directory path fields.") nil nil) ("dirs" variable (:documentation "Directories to search recursively." :type "list") nil nil) ("file-fields" variable (:documentation "Regular expression fields for files to search.") nil nil) ("files" variable (:documentation "Files to search." :default-value "(\"*.java\")" :type "list") nil nil) ("ignore-case-cb" variable (:documentation "Ignore case check box.") nil nil) ("ignore-case-p" variable (:documentation "If true, ignore case when searching." :default-value "t" :type "boolean") nil nil) ("grain-rbs" variable (:documentation "Granularity radio buttons.") nil nil) ("grain" variable (:documentation "Search granularity: Character, Word, Line" :default-value "Character" :type "string") nil nil) ("ok" variable (:documentation "True if user clicked the OK button." :default-value "nil" :type "boolean") nil nil) ("the-dialog" variable (:documentation "The only instance of the find expression dialog buffer." :static-flag t :default-value "nil" :type "(or null jde-find-dialog)") nil nil)) :type "class") nil [70926 72432]) ("initialize-instance" function (:parent "jde-find-dialog" :arguments ("this" "&rest" "fields")) nil [72434 72595]) ("efc-dialog-create" function (:parent "jde-find-dialog" :arguments ("this")) nil [72597 73861]) ("efc-dialog-show" function (:parent "jde-find-dialog" :arguments ("this")) nil [73864 74266]) ("efc-dialog-ok" function (:parent "jde-find-dialog" :arguments ("this")) nil [74269 75010]) ("efc-dialog-cancel" function (:parent "jde-find-dialog" :arguments ("this")) nil [75012 75307]) ("jde-find-root-history" variable nil nil [75311 75402]) ("jde-find-regexp-history" variable nil nil [75404 75496]) ("jde-find-grep-internal" function (:arguments ("regexp" "files" "&optional" "dirs" "no-case" "grain")) nil [75498 76870]) ("jde-find" function (:user-visible-flag t :arguments ("&optional" "regexp")) nil [76873 78985]) ("jde-find-dlg" function (:user-visible-flag t) nil [78987 79776]) ("jde-create-prj-values-str" function nil nil [79778 80265]) ("jde-bsh-buffer" type (:typemodifiers ("\"JDEE's beanshell buffer\"") :superclasses "bsh-comint-buffer" :type "class") nil [80267 80343]) ("initialize-instance" function (:parent "jde-bsh-buffer" :arguments ("this" "&rest" "fields")) nil [80345 80473]) ("jde-bsh" type (:typemodifiers ("\"Class of JDEE BeanShells. There is only one per Emacs session.\"") :superclasses "bsh" :members (("bsh-cmd-dir" variable (:documentation "Path of the BeanShell commmand directory." :type "string") nil nil) ("checkstyle-jar" variable (:documentation "Path of the Checkstyle jar." :type "string") nil nil) ("regexp-jar" variable (:documentation "Path of the Jakarta regexp jar." :type "string") nil nil) ("jde-jar" variable (:documentation "Path of the JDEE jar." :type "string") nil nil) ("jde-classes-dir" variable (:documentation "Path of the JDEE classes directory." :type "string") nil nil) ("the-bsh" variable (:documentation "The single instance of the JDEE's BeanShell." :static-flag t :type "jde-bsh") nil nil)) :type "class") nil [80475 81576]) ("initialize-instance" function (:parent "jde-bsh" :arguments ("this" "&rest" "fields")) nil [81578 82357]) ("bsh-create-buffer" function (:parent "jde-bsh" :arguments ("this")) nil [82359 82502]) ("bsh-build-classpath-argument" function (:parent "jde-bsh" :arguments ("this")) nil [82504 82624]) ("bsh-launch" function (:parent "jde-bsh" :arguments ("this" "&optional" "display-buffer")) nil [82626 84437]) ("jde-bsh" code nil nil [84479 84505]) ("jde-bsh-running-p" function nil nil [84507 84636]) ("jde-jeval" function (:arguments ("java-statement" "&optional" "eval-return")) nil [84639 85294]) ("jde-jeval-r" function (:arguments ("java-statement")) nil [85296 85747]) ("jde-jeval-cm" function (:arguments ("java-expr" "&optional" "buffer-head" "finish-fcn")) nil [85750 87816]) ("jde-bsh-run" function (:user-visible-flag t) nil [87834 87959]) ("jde-bsh-exit" function (:user-visible-flag t) nil [87961 88494]) ("jde-show-speedbar" function (:user-visible-flag t) nil [88497 88683]) ("jde-autoload-update" function (:user-visible-flag t) nil [88689 89142]) ("jde-browse-class-at-point" function (:user-visible-flag t) nil [89145 90211]) ("jde-self-test" function (:user-visible-flag t) nil [90294 90439]) ("jde-custom-adjust-groups" code nil nil [90522 90548]) ("jde" package nil nil [90550 90564]))
    :file "jde.el"
    :pointmax 112781
    )
   (semanticdb-table "jde-db.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("jde-parse" include nil nil [1271 1291]) ("eieio" include nil nil [1292 1308]) ("jde-util" include nil nil [1309 1328]) ("widget" include nil nil [1329 1346]) ("wid-edit" include nil nil [1370 1389]) ("unless" code nil nil [1392 1445]) ("jde-db-query-missing-source-files" variable (:default-value t) nil [1548 1773]) ("jde-db-mode-hook" variable (:user-visible-flag t) nil [1775 1894]) ("jde-db-initial-step-p" variable (:user-visible-flag t :default-value t) nil [1896 2145]) ("jde-db-read-vm-args" variable (:user-visible-flag t) nil [2147 2425]) ("jde-db-interactive-vm-arg-history" variable nil nil [2427 2524]) ("jde-db-read-app-args" variable (:user-visible-flag t) nil [2526 2668]) ("jde-db-interactive-app-arg-history" variable nil nil [2670 2777]) ("jde-db-classic-mode-vm" variable nil nil [2779 2932]) ("defgroup" code nil nil [2934 3029]) ("jde-db-option-classpath" variable (:user-visible-flag t) nil [3031 3352]) ("jde-db-option-verbose" variable (:user-visible-flag t :default-value (list nil nil nil)) nil [3355 4068]) ("jde-db-option-properties" variable (:user-visible-flag t) nil [4070 4466]) ("jde-db-option-heap-size" variable (:user-visible-flag t :default-value (list (cons 1 "megabytes") (cons 16 "megabytes"))) nil [4468 5039]) ("jde-db-option-stack-size" variable (:user-visible-flag t :default-value (list (cons 128 "kilobytes") (cons 400 "kilobytes"))) nil [5042 5623]) ("jde-db-option-garbage-collection" variable (:user-visible-flag t :default-value (list t t)) nil [5625 5934]) ("jde-db-option-java-profile" variable (:user-visible-flag t :default-value (cons nil "./java.prof")) nil [5936 6167]) ("jde-db-option-heap-profile" variable (:user-visible-flag t :default-value (cons nil (list "./java.hprof" 5 20 "Allocation objects"))) nil [6169 6640]) ("jde-db-option-verify" variable (:user-visible-flag t :default-value (list nil t)) nil [6645 6931]) ("jde-db-option-host" variable nil nil [6933 7128]) ("jde-db-option-connect-socket" variable (:default-value (list nil "4444")) nil [7177 7978]) ("jde-db-option-connect-shared-memory-name" variable (:default-value "javadebug") nil [8047 8599]) ("jde-db-option-vm-args" variable (:user-visible-flag t) nil [8602 9129]) ("jde-db-option-application-args" variable (:user-visible-flag t) nil [9132 9389]) ("jde-assert-source-or-debug-buffer" function nil nil [9391 9776]) ("jde-db-log-debugger-output-flag" variable nil nil [9778 9981]) ("jde-db-log-debugger-output" function (:arguments ("output")) nil [9983 10301]) ("jde-db-get-debuggee-status" function nil nil [10307 10595]) ("jde-db-debuggee-stopped-p" function nil nil [10598 10778]) ("jde-db-debuggee-suspended-p" function nil nil [10780 10966]) ("jde-db-debuggee-running-p" function nil nil [10968 11148]) ("jde-db-set-debugger" function (:user-visible-flag t :arguments ("name" "is-executable")) nil [11166 11662]) ("jde-db-set-args" function (:user-visible-flag t :arguments ("args")) nil [11679 11883]) ("jde-db-set-app-args" function (:user-visible-flag t :arguments ("args")) nil [11900 12111]) ("jde-db-spec-breakpoint-face-colors" variable (:user-visible-flag t :default-value (cons "black" "green")) nil [12520 13060]) ("jde-db-requested-breakpoint-face-colors" variable (:user-visible-flag t :default-value (cons "black" "yellow")) nil [13062 13618]) ("jde-db-active-breakpoint-face-colors" variable (:user-visible-flag t :default-value (cons "black" "red")) nil [13620 14142]) ("jde-db-breakpoint-marker" type (:typemodifiers ("\"Indicates the location of breakpoints in a source buffer. This class
uses overlays as markers in Emacs and extents in XEmacs.\"") :members (("marker" variable (:documentation "Overlay in Emacs, extent in XEmacs") nil nil)) :type "class") nil [14551 14809]) ("initialize-instance" function (:parent "jde-db-breakpoint-marker" :arguments ("this" "&rest" "fields")) nil [14811 15384]) ("jde-db-breakpoint-marker-set-face" function (:parent "jde-db-breakpoint-marker" :arguments ("this" "face")) nil [15387 15724]) ("jde-db-breakpoint-marker-p" function (:arguments ("marker")) nil [15726 16133]) ("jde-db-breakpoint-marker-delete" function (:parent "jde-db-breakpoint-marker" :arguments ("this")) nil [16135 16366]) ("jde-db-breakpoint" type (:typemodifiers (":allow-nil-initform" "\"Class of breakpoints.\"") :members (("id" variable (:documentation "Identifies this breakpoint." :type "integer") nil nil) ("file" variable (:documentation "Pathname of file containing this breakpoint." :type "string") nil nil) ("line" variable (:documentation "Number of line at which breakpoint is set." :type "integer") nil nil) ("marker" variable (:documentation "Marker used to highlight breakpoint line." :default-value "nil" :type "(or null jde-db-breakpoint-marker)") nil nil) ("class" variable (:documentation "Qualified name of class containing breakpoint." :type "string") nil nil) ("status" variable (:documentation "Status of this breakpoint. Legal values are `specified', `requested', `active'." :default-value "specified" :type "symbol") nil nil)) :type "class") nil [16775 17703]) ("initialize-instance" function (:parent "jde-db-breakpoint" :arguments ("this" "&rest" "fields")) nil [17706 18072]) ("jde-db-breakpoint-get-line" function (:parent "jde-db-breakpoint" :arguments ("this")) nil [18074 18538]) ("jde-db-breakpoints" variable nil nil [18540 18594]) ("jde-db-get-breakpoint-marker" function (:arguments ("file" "line")) nil [18597 18769]) ("jde-db-mark-breakpoint-specified" function (:arguments ("file" "line")) nil [18771 19058]) ("jde-db-mark-breakpoint-active" function (:arguments ("file" "line")) nil [19060 19343]) ("jde-db-mark-breakpoint-requested" function (:arguments ("file" "line")) nil [19345 19634]) ("jde-db-set-all-breakpoints-specified" function nil nil [19636 20047]) ("jde-db-delete-breakpoint" function (:arguments ("bp")) nil [20049 20633]) ("jde-db-clear-breakpoints" function nil nil [20635 21051]) ("jde-db-bp-list" variable nil nil [21053 21080]) ("jde-debug-list-breakpoints" function (:user-visible-flag t :arguments ("&optional" "active")) nil [21081 24260]) ("jde-db-process-breakpoints" function nil nil [24262 24868]) ("jde-db-breakpoints-add" function (:arguments ("bp")) nil [24870 25045]) ("jde-db-find-breakpoint-by-id" function (:arguments ("id")) nil [25048 25246]) ("jde-db-find-breakpoint" function (:arguments ("file" "line")) nil [25248 25539]) ("jde-db-breakpoint-id-counter" variable nil nil [25542 25621]) ("jde-db-nullify-breakpoint-markers" function nil nil [25623 26022]) ("add-hook" code nil nil [26024 26087]) ("jde-db-remark-breakpoints" function nil nil [26089 27115]) ("add-hook" code nil nil [27121 27173]) ("jde-db-query-source-file" function (:arguments ("class")) nil [27582 27872]) ("jde-db-find-class-source" function (:arguments ("class")) nil [27874 28565]) ("jde-db-set-debug-cursor" function (:arguments ("class" "file" "line")) nil [28567 29384]) ("jde-db-debuggee-status" type (:typemodifiers ("\"Status of debuggee process.\"") :members (("running-p" variable (:documentation "Non-nil if debuggee process is running." :default-value "nil" :type "boolean") nil nil) ("stopped-p" variable (:documentation "Non-nil if debuggee process is stopped." :default-value "nil" :type "boolean") nil nil) ("suspended-p" variable (:documentation "Non-nil if debuggee process is suspended." :default-value "nil" :type "boolean") nil nil)) :type "class") nil [29794 30257]) ("initialize-instance" function (:parent "jde-db-debuggee-status" :arguments ("this" "&rest" "fields")) nil [30259 30388]) ("jde-db-connector" type (:typemodifiers ("\"Proxy for debugger connectors.\"") :type "class") nil [30795 30863]) ("jde-db-launch-connector" type (:typemodifiers ("\"Launched by the debugger.\"") :superclasses "jde-db-connector" :type "class") nil [30865 30951]) ("jde-db-socket-connector" type (:typemodifiers ("\"Connect via a socket.\"") :superclasses "jde-db-connector" :members (("port" variable (:documentation "Port to the debuggee process." :default-value "nil" :type "(or null string)") nil nil)) :type "class") nil [30953 31151]) ("jde-db-shared-memory-connector" type (:typemodifiers ("\"Connect via a shared-memory transport (Windows only).\"") :superclasses "jde-db-connector" :members (("name" variable (:documentation "Shared memory name of debuggee process." :default-value "nil" :type "(or null string)") nil nil)) :type "class") nil [31153 31405]) ("jde-db-attach-connector" type (:typemodifiers ("\"Attaches to debuggee.\"") :superclasses "jde-db-connector" :type "class") nil [31408 31490]) ("jde-db-listen-connector" type (:typemodifiers ("\"Listens for debuggee.\"") :superclasses "jde-db-connector" :type "class") nil [31492 31574]) ("jde-db-socket-attach-connector" type (:typemodifiers ("\"Attach via a socket.\"") :interfaces ("jde-db-attach-connector") :superclasses "jde-db-socket-connector" :members (("host" variable (:documentation "Host on which the debuggee process runs." :default-value "nil" :type "(or null string)") nil nil)) :type "class") nil [31577 31838]) ("jde-db-shared-memory-attach-connector" type (:typemodifiers ("\"Attach via a shared memory connection.\"") :interfaces ("jde-db-attach-connector") :superclasses "jde-db-shared-memory-connector" :type "class") nil [31840 32001]) ("jde-db-socket-listen-connector" type (:typemodifiers ("\"Listen via a socket.\"") :interfaces ("jde-db-listen-connector") :superclasses "jde-db-socket-connector" :type "class") nil [32003 32132]) ("jde-db-shared-memory-listen-connector" type (:typemodifiers ("\"Listen via a shared memory connection.\"") :interfaces ("jde-db-listen-connector") :superclasses "jde-db-shared-memory-connector" :type "class") nil [32134 32295]) ("jde-db-debuggee" type (:typemodifiers ("\"Program being debugged.\"") :members (("status" variable (:documentation "Status of debuggee process." :type "jde-db-debuggee-status") nil nil) ("stack-depth" variable (:documentation "Stack depth." :type "string") nil nil)) :type "class") nil [32298 32574]) ("initialize-instance" function (:parent "jde-db-debuggee" :arguments ("this" "&rest" "fields")) nil [32576 32708]) ("jde-db-debuggee-app" type (:typemodifiers ("\"Application being debugged.\"") :superclasses "jde-db-debuggee" :members (("main-class" variable (:documentation "Qualified name of debuggee main class." :type "string") nil nil) ("connector" variable (:documentation "Type of connector between this debuggee and the debugger." :type "jde-db-connector") nil nil)) :type "class") nil [32711 33047]) ("jde-db-debuggee-applet" type (:typemodifiers ("\"Applet being debugged.\"") :superclasses "jde-db-debuggee" :members (("doc" variable (:documentation "Path of applet HTML document." :type "string") nil nil)) :type "class") nil [33049 33214]) ("jde-db-cmd" type (:typemodifiers ("\"Super class of debugger commands.\"") :members (("name" variable (:documentation "Name of command." :type "string") nil nil) ("debugger" variable (:documentation "Debugger." :type "jde-db-debugger") nil nil)) :type "class") nil [33622 33913]) ("initialize-instance" function (:parent "jde-db-cmd" :arguments ("this" "&rest" "fields")) nil [33917 34041]) ("jde-db-cmd-init" function (:parent "jde-db-cmd" :arguments ("this")) nil [34043 34158]) ("jde-db-cmd-make-command-line" function (:parent "jde-db-cmd" :arguments ("this")) nil [34160 34286]) ("jde-db-cmd-notify-response" function (:parent "jde-db-cmd" :arguments ("this" "response")) nil [34292 34440]) ("jde-db-cmd-response-p" function (:parent "jde-db-cmd" :arguments ("this" "output")) nil [34442 34587]) ("jde-db-cmd-breakpoint" type (:typemodifiers ("\"Class of breakpoint commands.\"") :superclasses "jde-db-cmd" :members (("breakpoints" variable (:documentation "List of breakpoint specification." :type "list") nil nil)) :type "class") nil [34590 34798]) ("jde-db-cmd-launch" type (:typemodifiers ("\"Launch a debuggee process.\"") :superclasses "jde-db-cmd" :type "class") nil [34800 34878]) ("jde-db-cmd-launch-app" type (:typemodifiers ("\"Launch an application in debug mode.\"") :superclasses "jde-db-cmd-launch" :members (("main-class" variable (:documentation "Main class of applications to be debugged." :type "string") nil nil)) :type "class") nil [34880 35130]) ("initialize-instance" function (:parent "jde-db-cmd-launch-app" :arguments ("this" "&rest" "fields")) nil [35132 35268]) ("jde-db-cmd-launch-applet" type (:typemodifiers ("\"Launch an applet in debug mode.\"") :superclasses "jde-db-cmd-launch" :members (("doc" variable (:documentation "Path of applet document." :type "string") nil nil)) :type "class") nil [35270 35448]) ("initialize-instance" function (:parent "jde-db-cmd-launch-applet" :arguments ("this" "&rest" "fields")) nil [35450 35584]) ("jde-db-cmd-set" type (:typemodifiers ("\"Set of debugger commands implemented by this debugger.\"") :members (("debugger" variable (:documentation "Debugger that owns this command set." :type "jde-db-debugger") nil nil) ("launch-app" variable (:documentation "Launch debuggee application" :type "jde-db-cmd-launch-app") nil nil) ("launch-applet" variable (:documentation "Launch debuggee applet" :type "jde-db-cmd-launch-applet") nil nil) ("run" variable (:documentation "Starts the current debuggee application." :type "jde-db-cmd") nil nil) ("cont" variable (:documentation "Continues the current debuggee application." :type "jde-db-cmd") nil nil) ("quit" variable (:documentation "Quit debugging the current application." :type "jde-db-cmd") nil nil) ("step-over" variable (:documentation "Step to the next line in the current frame." :type "jde-db-cmd") nil nil) ("step-into" variable (:documentation "Step to the next line in the current program." :type "jde-db-cmd") nil nil) ("step-out" variable (:documentation "Continue to the end of the current method." :type "jde-db-cmd") nil nil) ("up" variable (:documentation "Move up the stack." :type "jde-db-cmd") nil nil) ("down" variable (:documentation "Move down the stack." :type "jde-db-cmd") nil nil) ("where" variable (:documentation "Point to the current stopping point." :type "jde-db-cmd") nil nil) ("set-bp" variable (:documentation "Cmd that asks debugger to set a breakpoint." :type "jde-db-cmd") nil nil) ("clear-bp" variable (:documentation "Cmd that asks debugger to set a breakpoint." :type "jde-db-cmd") nil nil)) :type "class") nil [35622 37632]) ("jde-db-listener" type (:typemodifiers ("\"Listens to the output from the debugger.\"") :members (("debugger" variable (:documentation "The debugger" :type "jde-db-debugger") nil nil)) :type "class") nil [38041 38227]) ("jde-db-listener-filter-output" function (:parent "jde-db-listener" :arguments ("this" "output")) nil [38229 38351]) ("jde-db-debugger" type (:typemodifiers ("\"Class of Java debuggers.\"") :members (("name" variable (:documentation "Name of this Java debugger." :default-value "Java debugger" :type "string") nil nil) ("buffer-name" variable (:documentation "Name of buffer used to interact with debugger." :default-value "Java Debugger" :type "string") nil nil) ("buffer" variable (:documentation "Buffer used to interact with debugger." :type "buffer") nil nil) ("process" variable (:documentation "Debugger process.") nil nil) ("running-p" variable (:documentation "Non-nil if debugger process is running." :default-value "nil" :type "boolean") nil nil) ("proc-filter" variable (:documentation "Function used to parse debug output." :type "function") nil nil) ("listeners" variable (:documentation "List of debugger output listeners." :default-value "nil" :type "list") nil nil) ("cmd-set" variable (:documentation "Commands implemented by this debugger." :type "jde-db-cmd-set") nil nil) ("next-cmd" variable (:documentation "Next command(s) to execute." :default-value "nil" :type "list") nil nil) ("last-cmd" variable (:documentation "Last command send to the debugger." :type "(or null jde-db-cmd)") nil nil) ("debuggee" variable (:documentation "Application process being debugged." :type "jde-db-debuggee") nil nil) ("the-debugger" variable (:documentation "The currently active debugger." :static-flag t :type "jde-db-debugger") nil nil)) :type "class") nil [38759 40374]) ("initialize-instance" function (:parent "jde-db-debugger" :arguments ("this" "&rest" "fields")) nil [40376 40585]) ("jde-db-create-debuggee-app" function (:parent "jde-db-debugger" :arguments ("this" "main-class")) nil [40588 40662]) ("jde-db-create-debuggee-applet" function (:parent "jde-db-debugger" :arguments ("this")) nil [40664 40741]) ("jde-db-ready-p" function (:parent "jde-db-debugger" :arguments ("this" "output")) nil [40743 41042]) ("jde-db-process-debugger-output" function (:parent "jde-db-debugger" :arguments ("this" "output")) nil [41045 41645]) ("jde-db-add-listener" function (:parent "jde-db-debugger" :arguments ("this" "listener")) nil [41647 41957]) ("jde-db-remove-listener" function (:parent "jde-db-debugger" :arguments ("this" "listener")) nil [41959 42282]) ("jde-db-set-process-filter" function (:parent "jde-db-debugger" :arguments ("this")) nil [42284 42634]) ("jde-db-notify-process-exit" function (:parent "jde-db-debugger" :arguments ("this" "msg")) nil [42636 44045]) ("jde-db-notify-process-status-change" function (:parent "jde-db-debugger" :arguments ("this" "msg")) nil [44048 44325]) ("jde-db-set-process-sentinel" function (:parent "jde-db-debugger" :arguments ("this")) nil [44328 44553]) ("jde-db-exec-next-cmd" function (:parent "jde-db-debugger" :arguments ("this")) nil [44555 45136]) ("jde-db-exec-cmds" function (:parent "jde-db-debugger" :arguments ("this" "cmds")) nil [45138 45290]) ("jde-db-exec-cmd" function (:parent "jde-db-debugger" :arguments ("this" "cmd")) nil [45292 45448]) ("jde-db-classpath-arg" function (:parent "jde-db-debugger" :arguments ("this")) nil [45450 45966]) ("jde-db-classic-mode-arg" function (:parent "jde-db-debugger" :arguments ("this")) nil [45968 46143]) ("jde-db-property-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [46145 46379]) ("jde-db-verbose-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [46382 46879]) ("jde-db-heap-size-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [46881 47699]) ("jde-db-stack-size-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [47701 48500]) ("jde-db-garbage-collection-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [48502 48924]) ("jde-db-garbage-collection-arg" function (:parent "jde-db-debugger" :arguments ("this")) nil [48926 49227]) ("jde-db-heap-profile-arg" function (:parent "jde-db-debugger" :arguments ("this")) nil [49230 49817]) ("jde-db-verify-arg" function (:parent "jde-db-debugger" :arguments ("this")) nil [49819 50185]) ("jde-db-command-line-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [50188 50382]) ("jde-db-host-arg" function (:parent "jde-db-debugger" :arguments ("this")) nil [50385 50522]) ("jde-db-launch-arg" function (:parent "jde-db-debugger" :arguments ("this")) nil [50524 50759]) ("jde-db-get-vm-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [50761 51049]) ("jde-db-debugger-get-working-dir" function (:parent "jde-db-debugger" :arguments ("this")) nil [51051 51241]) ("jde-db-debugger-get-prog-args" function (:parent "jde-db-debugger" :arguments ("this")) nil [51243 51312]) ("jde-db-debugger-start" function (:parent "jde-db-debugger" :arguments ("this")) nil [51314 51396]) ("jde-db-debugger-launch" function (:parent "jde-db-debugger" :arguments ("this" "main-class")) nil [51399 51542]) ("jde-db-debugger-connect" function (:parent "jde-db-debugger" :arguments ("this" "&optional" "listenp")) nil [51545 51672]) ("jde-db-get-the-debugger" function nil nil [51675 51909]) ("jde-debug" function (:user-visible-flag t) nil [52639 54779]) ("jde-debugger-running-p" function nil nil [54781 55170]) ("jde-debug-applet-init" function (:arguments ("applet-class" "applet-doc-path")) nil [55172 56195]) ("jde-debug-applet-internal" function (:arguments ("applet-doc")) nil [56200 56560]) ("jde-debug-applet" function (:user-visible-flag t :arguments ("&optional" "doc")) nil [56578 57828]) ("jde-debug-run" function (:user-visible-flag t) nil [57832 58481]) ("jde-debug-cont" function (:user-visible-flag t) nil [58486 59213]) ("jde-debug-quit" function (:user-visible-flag t) nil [59216 59769]) ("jde-debug-step-over" function (:user-visible-flag t) nil [59771 60394]) ("jde-debug-step-into" function (:user-visible-flag t) nil [60397 61016]) ("jde-debug-step-out" function (:user-visible-flag t) nil [61018 61640]) ("jde-debug-up" function (:user-visible-flag t) nil [61643 62167]) ("jde-debug-down" function (:user-visible-flag t) nil [62169 62703]) ("jde-debug-where" function (:user-visible-flag t) nil [62706 63252]) ("jde-db-spec-breakpoint" function nil nil [63255 63794]) ("jde-debug-set-breakpoint" function (:user-visible-flag t) nil [63797 64422]) ("jde-debug-clear-breakpoint" function (:user-visible-flag t) nil [64424 64968]) ("jde-debug-toggle-breakpoint" function (:user-visible-flag t) nil [64970 65495]) ("jde-debug-clear-breakpoints" function (:user-visible-flag t) nil [65497 66043]) ("jde-db-minibuffer-local-map" variable nil nil [66046 66146]) ("if" code nil nil [66147 66346]) ("class-from-file-name" function (:arguments ("file-name")) nil [66349 66453]) ("jde-db-get-vm-args-from-user" function nil nil [66456 66678]) ("jde-db-get-app-args-from-user" function nil nil [66680 66915]) ("jde-db-get-package" function nil nil [66921 67254]) ("jde-db-get-class" function (:user-visible-flag t) nil [67256 67649]) ("jde-db-src-dir-matches-file-p" function (:arguments ("file")) nil [67652 67987]) ("jde-db" package nil nil [67989 68006]))
    :file "jde-db.el"
    :pointmax 89258
    )
   (semanticdb-table "jde-parse.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("semantic-sb" include nil nil [930 952]) ("semantic-ctxt" include nil nil [953 977]) ("avltree" include nil nil [978 996]) ("thingatpt" include nil nil [997 1017]) ("eieio" include nil nil [1018 1034]) ("jde-imenu" include nil nil [1035 1055]) ("efc" include nil nil [1110 1124]) ("jde-require" code nil nil [1125 1146]) ("jde-auto-parse-enable" variable (:default-value t) nil [1148 1388]) ("jde-auto-parse-buffer-interval" variable (:default-value 180) nil [1390 1636]) ("jde-auto-parse-max-buffer-size" variable (:default-value 50000) nil [1638 1930]) ("jde-parse-buffer-needs-reparse-p" variable nil nil [1932 2025]) ("make-variable-buffer-local" code nil nil [2026 2088]) ("jde-auto-parse-buffer-timer" variable nil nil [2090 2176]) ("make-variable-buffer-local" code nil nil [2177 2234]) ("jde-parse-casting" variable nil nil [2236 2326]) ("jde-parse-current-beginning" variable (:default-value (make-marker)) nil [2328 2450]) ("jde-parse-current-end" variable (:default-value (make-marker)) nil [2452 2562]) ("jde-parse-primitive-types" variable (:default-value (quote ("byte" "char" "double" "float" "int" "long" "short" "boolean"))) nil [2564 2729]) ("jde-parse-attempted-to-import" variable nil nil [2731 2902]) ("jde-parse-java-symbol-re" variable (:default-value (sregexq (1+ (char (65 . 90) (97 . 122) (48 . 57) "[]" "?" "_" "." (160 . 255))))) nil [2947 3429]) ("jde-parse-after-buffer-changed" function nil nil [3431 3951]) ("jde-parse-should-auto-parse-buffer-p" function nil nil [3953 4206]) ("eval-when" code nil nil [4226 4751]) ("jde-parse-buffer-changed-hook" function (:arguments ("begin" "end" "length")) nil [4753 6384]) ("jde-parse-buffer-contains-multiple-classes-p" function nil nil [6386 6983]) ("jde-parse-buffer-contains-multiple-classes-p" variable nil nil [7130 7250]) ("make-variable-buffer-local" code nil nil [7251 7325]) ("jde-parse-update-after-parse" function (:arguments ("tokens")) nil [7328 8070]) ("jde-parse-update-after-partial-parse" function (:arguments ("tokens")) nil [8072 8331]) ("jde-parse-get-top-of-class" function (:user-visible-flag t :arguments ("&optional" "class-regexp" "no-move-point")) nil [8334 10269]) ("jde-parse-get-nth-member" function (:user-visible-flag t :arguments ("&optional" "class-name" "modifiers" "member-name-regexp" "elt" "goto-start-p" "compare-method")) nil [10274 13097]) ("jde-parse-get-member-variables" function (:arguments ("&optional" "tag")) nil [13101 13592]) ("jde-parse-get-member-functions" function (:arguments ("&optional" "tag")) nil [13594 14069]) ("jde-parse-get-serializable-members" function (:arguments ("&optional" "tag")) nil [14071 14762]) ("jde-parse-member-is-scalar" function (:arguments ("tag")) nil [14764 14958]) ("jde-parse-member-is-primitive" function (:arguments ("tag")) nil [14960 15333]) ("jde-parse-member-is-float" function (:arguments ("tag")) nil [15335 15546]) ("jde-parse-compare-member-types" function (:arguments ("a" "b")) nil [15549 16194]) ("jde-parse-get-package-name" function nil nil [16198 16504]) ("jde-parse-get-package-from-name" function (:arguments ("class-name")) nil [16506 16729]) ("jde-parse-get-unqualified-name" function (:arguments ("name")) nil [16731 16946]) ("jde-parse-get-super-class-at-point" function nil nil [16948 17609]) ("jde-parse-class-mod-re" variable (:constant-flag t :default-value "public\\|abstract\\|final\\|static\\|strictfp\\|protected") nil [17611 17755]) ("jde-parse-java-comment-re" variable (:constant-flag t :default-value "/\\*\\(?:[*][^/]\\|[^*][/]\\|[^*/]\\)*[*/]?\\*/\\|//.*$") nil [17757 17900]) ("jde-parse-java-comment-or-ws-re" variable (:constant-flag t :default-value (concat jde-parse-java-comment-re "\\|[ 	
]")) nil [17902 18057]) ("jde-parse-get-class-modifiers" function nil nil [18059 18985]) ("jde-parse-class-decl-re" variable (:constant-flag t :default-value (concat "^" "\\(?:" jde-parse-java-comment-or-ws-re "\\|[a-zA-Z0-9_.=(]\\)*" "\\<\\(class\\|interface\\|new\\)" "\\(?:" jde-parse-java-comment-or-ws-re "\\)+" "\\(?:[a-zA-Z0-9_]+\\.\\)*" "\\([a-zA-Z0-9_]+\\)" "\\(?:" jde-parse-java-comment-or-ws-re "\\|[a-zA-Z0-9_.,()]\\)*" "\\=")) nil [18987 19836]) ("jde-parse-get-innermost-class-at-point" function nil nil [19838 21608]) ("jde-parse-get-class-at-point" function nil nil [21610 22030]) ("jde-parse-get-classes-at-point" function nil nil [22033 22304]) ("jde-parse-select-qualified-class-name" function (:arguments ("class" "&optional" "prompt")) nil [22307 22876]) ("jde-parse-qualified-name-at-point" function nil nil [22879 23962]) ("jde-parse-get-buffer-class" function nil nil [23965 24364]) ("jde-parse-get-buffer-unqualified-class" function nil nil [24366 24563]) ("jde-parse-double-backslashes" function (:arguments ("name")) nil [24566 24698]) ("jde-parse-valid-declaration-at" function (:arguments ("point" "varname")) nil [24700 26116]) ("jde-parse-declared-type-of" function (:arguments ("name")) nil [26270 27382]) ("jde-parse-find-declaration-of" function (:arguments ("name")) nil [27384 29063]) ("jde-display-parse-error" function (:arguments ("error")) nil [29066 29347]) ("jde-parse" function (:user-visible-flag t) nil [29349 30382]) ("jde-parse-comment-or-quoted-p" function nil nil [30384 30657]) ("jde-parse-get-method-at-point" function (:arguments ("&optional" "position")) nil [30659 32119]) ("jde-avl-tree" type (:typemodifiers ("\"Balanced binary tree.\"") :members (("tree" variable (:documentation "The tree" :type "list") nil nil) ("compare-fcn" variable (:documentation "Compare function." :type "function") nil nil)) :type "class") nil [32123 32386]) ("initialize-instance" function (:parent "jde-avl-tree" :arguments ("this" "&rest" "fields")) nil [32388 32667]) ("jde-avl-tree-add" function (:parent "jde-avl-tree" :arguments ("this" "item")) nil [32669 32795]) ("jde-avl-tree-delete" function (:parent "jde-avl-tree" :arguments ("this" "item")) nil [32797 32929]) ("jde-avl-tree-is-empty" function (:parent "jde-avl-tree" :arguments ("this")) nil [32931 33079]) ("jde-avl-tree-find" function (:parent "jde-avl-tree" :arguments ("this" "item")) nil [33081 33233]) ("jde-avl-tree-map" function (:parent "jde-avl-tree" :arguments ("this" "map-function")) nil [33235 33399]) ("jde-avl-tree-first" function (:parent "jde-avl-tree" :arguments ("this")) nil [33401 33528]) ("jde-avl-tree-last" function (:parent "jde-avl-tree" :arguments ("this")) nil [33532 33656]) ("jde-avl-tree-copy" function (:parent "jde-avl-tree" :arguments ("this")) nil [33658 33775]) ("jde-avl-tree-flatten" function (:parent "jde-avl-tree" :arguments ("this")) nil [33777 33931]) ("jde-avl-tree-size" function (:parent "jde-avl-tree" :arguments ("this")) nil [33933 34066]) ("jde-avl-tree-clear" function (:parent "jde-avl-tree" :arguments ("this")) nil [34068 34193]) ("jde-parse-method-map" type (:typemodifiers ("\"Map of the methods in the current buffer.\"") :superclasses "jde-avl-tree" :type "class") nil [34195 34293]) ("jde-parse-method-map-compare-fcn" function (:arguments ("m1" "m2")) nil [34296 34427]) ("initialize-instance" function (:parent "jde-parse-method-map" :arguments ("this" "&rest" "fields")) nil [34429 35811]) ("jde-parse-method-map-get-method-at" function (:parent "jde-parse-method-map" :arguments ("this" "&optional" "pos")) nil [35813 36060]) ("jde-parse-the-method-map" variable nil nil [36062 36161]) ("make-variable-buffer-local" code nil nil [36162 36216]) ("jde-current-buffer-exact-name-match-p" function (:arguments ("tag")) nil [36219 36392]) ("jde-etags-recognize-tags-table" function nil nil [36394 36750]) ("jde-parse-java-variable-at-point" function nil nil [36752 42172]) ("jde-parse-isolate-to-parse" function (:arguments ("s")) nil [42174 43499]) ("jde-parse-match-paren-position" function nil nil [43500 43829]) ("jde-parse-eval-type-of" function (:arguments ("expr")) nil [43831 53431]) ("jde-parse-convert-args-to-types" function (:arguments ("args")) nil [53433 54029]) ("jde-parse-transform-array-classes-names" function (:arguments ("name")) nil [54031 55045]) ("jde-parse-get-component-type-of-array-class" function (:arguments ("name")) nil [55047 55441]) ("jde-split-import-token" function (:arguments ("token")) nil [55508 56352]) ("jde-parse-import-list" function nil nil [56354 57265]) ("jde-parse-get-qualified-name" function (:arguments ("name" "&optional" "import")) nil [57663 58574]) ("jde-parse-class-exists" function (:arguments ("name")) nil [58626 59283]) ("jde-parse-get-inner-class" function (:arguments ("expr")) nil [59285 59743]) ("jde-parse-get-inner-class-name" function (:arguments ("name" "qualifier")) nil [60293 63428]) ("jde-parse-isolate-before-matching-of-last-car" function (:arguments ("s")) nil [63496 64773]) ("jde-parse-split-by-dots" function (:arguments ("s")) nil [64775 65111]) ("jde-parse-find-completion-for-pair" function (:arguments ("pair" "&optional" "exact-completion" "access-level")) nil [65113 65327]) ("jde-parse-keywordp" function (:arguments ("variable")) nil [65329 65609]) ("jde-parse" package nil nil [65611 65631]))
    :file "jde-parse.el"
    :pointmax 76678
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0beta3"
  :semanticdb-version "2.0beta3"
  )
